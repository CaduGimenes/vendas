{
  "_args": [
    [
      "pace@0.0.4",
      "/home/carlos/Documentos/vendas"
    ]
  ],
  "_from": "pace@0.0.4",
  "_id": "pace@0.0.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/pace",
  "_phantomChildren": {},
  "_requested": {
    "name": "pace",
    "raw": "pace@0.0.4",
    "rawSpec": "0.0.4",
    "scope": null,
    "spec": "0.0.4",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/pace/-/pace-0.0.4.tgz",
  "_shasum": "d66405d5f5bc12d25441a6e26c878dbc69e77a77",
  "_shrinkwrap": null,
  "_spec": "pace@0.0.4",
  "_where": "/home/carlos/Documentos/vendas",
  "author": {
    "email": "cpsubrian@gmail.com",
    "name": "Brian Link"
  },
  "bugs": {
    "url": "https://github.com/cpsubrian/pace/issues"
  },
  "dependencies": {
    "charm": "~0.1.0"
  },
  "description": "Command-line progress bar and progress metrics.  Helps you measure the 'pace' of a long-running script.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d66405d5f5bc12d25441a6e26c878dbc69e77a77",
    "tarball": "https://registry.npmjs.org/pace/-/pace-0.0.4.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "http://cantina.github.com",
  "main": "pace.js",
  "maintainers": [
    {
      "name": "cpsubrian",
      "email": "cpsubrian@gmail.com"
    }
  ],
  "name": "pace",
  "optionalDependencies": {},
  "readme": "Pace\n====\n\nA node.js module that outputs a progress bar and other metrics to the command-line.\nIt was originally conceived to help measure the 'pace' of long running scripts.\nWe've used it to optimize scripts that would have taken hours to complete down\nto minutes, without having to wait the hours before knowing that the script\ncould use some optimization.\n\nInstallation\n------------\n```\n$ npm install pace\n```\n\nExample\n-------\nRunning the following code:\n\n```js\nvar total = 50000,\n    count = 0,\n    pace = require('pace')(total);\n\nwhile (count++ < total) {\n  pace.op();\n\n  // Cause some work to be done.\n  for (var i = 0; i < 1000000; i++) {\n    count = count;\n  }\n}\n```\n\nWill cause output to your console similar to:\n\n![Sample progress bar output](https://github.com/cpsubrian/pace/raw/master/screenshot.png)\n\nUsage\n-----\n### `Pace` object ###\nThe module exports a factory function to generate instances of `Pace` objects.\nSo `require('pace')(<options>)` creates an instance of `Pace`, passing\n`options` to the constructor.\n\n### Options ###\nOptions can either be an object literal, or an integer.  If its an integer then\nit is the same as passing options with only the `total` specified.\n\n```js\nrequire('pace')(100);\n\n// Same as\n\nrequire('pace')({total: 100});\n```\n\nSupported Options:\n\n  * `total` - The total number of operations that _YOUR_ script will execute.\n  * `maxBurden` - The maximum 'burden' that the progress bar should incur. See more about burden below.\n  * `showBurden` - Mostly for debugging.  Show the current burden / skipped steps with the other metrics.\n\n### pace.op([count]) ###\nSignal to pace that an operation was completed in your script by calling\n`pace.op()`.\n\nIf you would rather track the progress in your own logic, you can call\n`pace.op(<count>)` where `<count>` is the current operation interation\n(for example step # 50 of a 100 step process).\n\n### pace.total ###\nIf your script has a dynamic amount of work to do (for example, depending on the\nresults of previous operation there may be more steps to complete), you can\nfreely change the value of pace.total.  Just set the value like: `pace.total = 200`.\n\nBurden\n------\nDepending on how intensive your operations are, calculating, formatting, and\nprinting the progress bar might be much more expensive than the work you\nare doing.  It would be silly if printing a progress bar caused your\njob to take significantly longer than it would have otherwise. _Pace_ tracks\na stat called 'burden', which is basically a percentage of the overall\nexecution time that is being spent inside the progress bar logic itself.\n\nThe default `maxBurden` is `0.5`, which translates to `0.5% of the total execution\ntime`.  If this low burden is causing you to see progress reported less\noften than you would prefer, you can raise it to something like `20` (20%) via\nthe `maxBurden` option.\n\nExamples\n--------\nThe `test/` folder contains some simple test scripts you can run to see the\nprogress bar in action.\n\n\n- - -\n\n### Developed by [Terra Eclipse](http://www.terraeclipse.com)\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n- - -\n\n### License: MIT\nCopyright (C) 2012 Terra Eclipse, Inc. ([http://www.terraeclipse.com](http://www.terraeclipse.com))\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/cpsubrian/pace.git"
  },
  "scripts": {},
  "version": "0.0.4"
}
